{"version":3,"sources":["Components/SinglePost.jsx","Components/Profiles.jsx","Components/Home.jsx","serviceWorker.js","index.js"],"names":["SinglePost","text","this","props","post","profile","name","surname","profileImg","image","postImg","Container","Row","className","Col","xs","sm","Image","src","rounded","style","width","Card","Body","Title","roundedCircle","height","Text","Button","Component","Profiles","componentDidMount","a","async","fetch","process","responsePosts","responseProfiles","json","posts","profiles","setState","state","length","map","find","username","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0WAIqBA,E,iLACT,IACAC,EAASC,KAAKC,MAAMC,KAApBH,KADD,EAEmBC,KAAKC,MAAME,QAA7BC,EAFD,EAECA,KAAMC,EAFP,EAEOA,QACRC,EAAaN,KAAKC,MAAME,QAAQI,MAChCC,EAAUR,KAAKC,MAAMC,KAAKK,MAChC,OACE,6BACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACC,EAAA,EAAD,CAAOC,IAAKR,EAASS,SAAO,EAACC,MAAO,CAAEC,MAAO,WAE/C,kBAACP,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACM,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,KACA,kBAACP,EAAA,EAAD,CAAOC,IAAKV,EAAYiB,eAAa,EAACL,MAAO,CAAEC,MAAO,OAAQK,OAAO,UADrE,IACmFpB,EADnF,IAC0FC,GAE1F,kBAACe,EAAA,EAAKK,KAAN,KAAY1B,IAGd,kBAACqB,EAAA,EAAKC,KAAN,KACE,kBAACK,EAAA,EAAD,0B,GAvBsBC,aCDnBC,E,YACnB,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAsBR4B,kBAAoB,gCAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACUE,MAC1BC,gCAFgB,cACZC,EADY,kBAAAJ,EAAA,MAIaE,MAC7BC,mCALgB,cAIZE,EAJY,kBAAAL,EAAA,MAQEI,EAAcE,QARhB,cAQZC,EARY,mBAAAP,EAAA,MASKK,EAAiBC,QATtB,QASZE,EATY,OAWlB,EAAKC,SAAS,CAAEF,QAAOC,aAXL,uCArBlB,EAAKE,MAAQ,CAAEH,MAAO,GAAIC,SAAU,IAFnB,E,sEAIT,IAAD,EACqBtC,KAAKwC,MAAzBF,EADD,EACCA,SAAUD,EADX,EACWA,MAClB,OACE,6BACuB,IAApBC,EAASG,OACR,2CAEAJ,EAAMK,KAAI,SAAAxC,GAAI,OACZ,kBAAC,EAAD,CACEA,KAAMA,EACNC,QAASmC,EAASK,MAChB,SAAAxC,GAAO,OAAIA,EAAQyC,WAAa1C,EAAK0C,sB,GAhBfjB,aCAjBkB,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJ0BlB,aCSdmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.af03caae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Container, Row, Col, Image, Card } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport default class SinglePost extends Component {\r\n  render() {\r\n    const { text } = this.props.post;\r\n    const { name, surname } = this.props.profile;\r\n    const profileImg = this.props.profile.image;\r\n    const postImg = this.props.post.image;\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Row className=\"mb-2\">\r\n            <Col xs={12} sm={6}>\r\n              <Image src={postImg} rounded style={{ width: \"100%\" }} />\r\n            </Col>\r\n            <Col xs={12} sm={6}>\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Title>\r\n                  <Image src={profileImg} roundedCircle style={{ width: \"40px\", height:\"40px\" }} /> {name} {surname}\r\n                  </Card.Title>\r\n                  <Card.Text>{text}</Card.Text>\r\n                </Card.Body>\r\n\r\n                <Card.Body>\r\n                  <Button>Profile</Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SinglePost from \"./SinglePost\";\r\n\r\nexport default class Profiles extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { posts: [], profiles: [] };\r\n  }\r\n  render() {\r\n    const { profiles, posts } = this.state;\r\n    return (\r\n      <div>\r\n        {profiles.length === 0 ? (\r\n          <div>Loading...</div>\r\n        ) : (\r\n          posts.map(post => (\r\n            <SinglePost\r\n              post={post}\r\n              profile={profiles.find(\r\n                profile => profile.username === post.username\r\n              )}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount = async () => {\r\n    const responsePosts = await fetch(\r\n      process.env.REACT_APP_BASE_URL + \"/posts\"\r\n    );\r\n    const responseProfiles = await fetch(\r\n      process.env.REACT_APP_BASE_URL + \"/profiles\"\r\n    );\r\n\r\n    const posts = await responsePosts.json();\r\n    const profiles = await responseProfiles.json();\r\n\r\n    this.setState({ posts, profiles });\r\n  };\r\n}\r\n","import React, { Component } from 'react'\r\nimport Profiles from './Profiles'\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profiles />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Components/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}